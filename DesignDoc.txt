 
Lightweight Process Monitor 
    #These notes are mainly for myself in keeping focus on the project at hand
    

Overview:
Develop a simple command-line process monitor that provides information about running processes on a system, including memory usage, CPU usage, and other relevant metrics.

Features:

    Process List: Display a list of running processes, along with their process IDs, names, and status (e.g., running, sleeping, etc.).

    Process Metrics: Show memory usage (e.g., resident set size), CPU usage (e.g., percentage of total CPU time), and other relevant metrics for each process.

    Sorting & Filtering: Allow users to sort processes by various criteria, such as memory usage, CPU usage, or process ID. Provide options to filter processes by user, name, or status.

    Real-time Updates: Implement real-time updates of process information, with adjustable refresh intervals.

    System Summary: Display a system-wide summary, including total CPU usage, memory usage, and the number of running processes.

Implementation:
Choose a language like C, C++, or Rust for this project, as they offer low-level access to system resources. 
For platform-specific system information, you can use libraries like libproc (for Linux) or PSAPI (for Windows). 
Familiarize yourself with system calls, process management, and memory management to collect the required information for each process.

Current Tasks:
 - Find and put cpu utilization information in cpuinfo.hpp
 - Formulate the information into graphs in sysinfo.hpp
    - Find how to formulate graphs easily displayed in ncurses
        - Find out ways of displaying with ncurses

- Add different windows with different information and graphs
    - Separate memory, cpu, and processes into different windows

- Add network monitoring support

//////////////
Set formatting to KR
